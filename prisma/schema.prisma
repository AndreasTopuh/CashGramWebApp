
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  phone     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  expenses     Expense[]
  telegramUser TelegramUser?
  categories   Category[]
  
  @@map("users")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#3B82F6") // Default blue color
  icon      String   @default("ðŸ’°")      // Default money icon
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Foreign Keys
  userId    String
  
  // Relations
  expenses  Expense[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([name, userId])
  @@map("categories")
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign Keys
  userId      String
  categoryId  String
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@map("expenses")
}

model TelegramUser {
  id         String   @id @default(cuid())
  telegramId String   @unique
  userId     String   @unique
  token      String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("telegram_users")
}
